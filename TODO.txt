## Sruthi

* Why do I not get an email when you submit a PR to ai.tutorials? Ask AI. Google. My settings seem fine. For example, I get an email when a PR is accepted.

* Turn babynames data into a duck db ourselves. And then the first few questions involve downloading this object and using it. Read the Databases R4DS chapter for background.

* Do the same for flights.

* Put data we want into inst/extdata. Have students download that data (which might be in db format or xls or whatever) to their current project. This can either be done by hand or, probably better, using download.file(). Then, the student can put code in the QMD for reading that data and playing with it.

* In extdata/README.txt, include the description (and maybe the code) which you used to create the data objects. write_xls(flights, "flights.xls").

Write code which creates a new duck db. (Before, you might want to redo the Database tutorial. Or you might closely read the chapter and type all the code. there.) You load up babynames into this db. Then, you save a copy of the db with a function like dbExecute(con, "EXPORT DATABASE 'backup_directory'"). (NOT SURE THAT WORKS.) Put the resulting file (or maybe its an entire directory into extdata. (And write the above steps, with code, the README)). (Submit a PR and email me, and I will accept.)

Then, in the QMD, have the student download this file/directory into the current project. Then add code to the QMD which connects to the database, and then ask various questions.

Find some data sources. 

    * Begin by re-reading these three data source chapters: spreadsheets, (duck) databases, and arrow. Maybe we really just start with looking for data that we like, data that we know makes a cool plot.

    * Go looking for cool examples these data sources, stuff that would be fun to play with and make a cool plot. 

    



# Introductions

This package will hold all of our new breed AI tutorials.


## Plan for R4DS

We will have 5 one hour tutorials which cover the material in R4DS. It is tricky to figure out the best way to organize this since so many of the later tutorials cover stand-alone topics like spreadsheets and databases. Placing the chapters in order does not make a lot of sense. 

In essence, each of our five tutorials should start with a get-the-data section which makes use of one of the later chapters. It then also covers the material in some of the middle chapters. The intro chapters are all covered in the first tutorial.

We don't cover any of the workflow chapters, or chapters 27-29.

### r4ds-1

data visualization
data transformations
data tidying
data import

### r4ds-2

spreadsheets
layers
exploratory data analysis
communication

### r4ds-3

databases (duck)
logical vectors
numbers
strings
regular expressions

### r4ds-4

arrow
factors
dates-times
missing values
joins

### r4ds-5

hierarchical-data
web-scraping
functions
iterations

### R4DS tutorial structure

The introduction and summary are like any AI tutorial: Github, GH Pages and so on.

There are 3 to 5 Sections, each begins with some data processing and/or manipulation, questions which cover the important packages and functions in the relevant chapters. 

### Data storage

Most R4DS tutorials require the use of some strange data structures, like arrow files, spreadsheets and what not. We want to maintain our own copies of those starter files, even though they originally come from the web somewhere. 

* These are stored in `inst/extdata`. 

* Document where these files come from in a brief note in `inst/extdata/README.txt`.

* The files should be much less than 100 megabytes each because we want students to be able to easily download them and back them up in their personal repos.

* We exclude `inst/extdata` from the R package. Which is OK! We need to keep the size of the package down if we want this to be on CRAN someday. 
Sruthi
